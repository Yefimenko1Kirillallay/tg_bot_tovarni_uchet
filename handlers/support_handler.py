import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.enums import content_type

from main import bot

from States import *
from messages import *
import keyboards as kb
from filters import *
import database as db

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

router = Router()

router.message.filter(IsRegistredFilter(reg=True), ActiveSubscribeFilter(status=True))


@router.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõé')  # lambda message: message.chat.id != ADMIN_CHAT_ID
async def start_support(message: Message, state: FSMContext):
    await state.set_state(SupportState.get_text)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.', reply_markup=kb.cancel_keyboard)


@router.message(SupportState.get_text)
async def get_text(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    mes = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–º—è: <code>{message.from_user.full_name}</code>\n" \
          f"ID: <code>{message.from_user.id}</code>\nUsername: <code>@{message.from_user.username}</code>\n" \
          f"–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n<code>{message.text}</code>"
    await bot.send_message(ADMIN_CHAT_ID, mes)
    forwarded = await bot.forward_message(ADMIN_CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(lambda message: message.chat.id == ADMIN_CHAT_ID)
async def reply_to_user(message: Message):
    if message.reply_to_message and "ID:" in message.reply_to_message.text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            user_id_text = message.reply_to_message.text.split("ID:")[1].split("\n")[0].strip()
            user_id = int(user_id_text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            reply_text = message.text

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {reply_text}")
            await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except ValueError:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞.")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –æ—Ç–≤–µ—Ç.")
