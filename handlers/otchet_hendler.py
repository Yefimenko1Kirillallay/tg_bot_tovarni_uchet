import traceback
import os
import pandas as pd
import gspread
from gspread_dataframe import set_with_dataframe

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.enums import content_type

from google.auth.exceptions import GoogleAuthError

from States import *
from messages import *
import keyboards as kb
from filters import *
import database as db

router = Router()

router.message.filter(IsRegistredFilter(reg=True), ActiveSubscribeFilter(status=True))

SHEET_NAME = '–õ–∏—Å—Ç1'
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")
gc = gspread.service_account(filename=GOOGLE_CREDENTIALS_JSON)


async def make_otchet(owner_id, google_sheet_id):
    try:
        sh = gc.open_by_key(google_sheet_id)
        worksheet = sh.worksheet(SHEET_NAME)

        data = await db.get_full(owner_id=owner_id)
        if data:
            dataframe = pd.DataFrame(data)

            worksheet.clear()
            set_with_dataframe(worksheet, dataframe)

            return f"–û—Ç—á—ë—Ç —Å–¥–µ–ª–∞–Ω\n–í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: " \
                   f"https://docs.google.com/spreadsheets/d/{google_sheet_id}/edit#gid=0"
        else:
            return "–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞"

    except gspread.exceptions.SpreadsheetNotFound:
        return "–û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã –¥–∞–ª–∏ —Ä–∞–±–æ—á–∏–π id –∏, " \
                      "—á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø"

    except gspread.exceptions.APIError as api_error:
        return f"–û—à–∏–±–∫–∞: {api_error}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API Google Sheets –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, " \
               f"–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ."

    except GoogleAuthError:
        # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return "–û—à–∏–±–∫–∞: –ø—Ä–æ–±–ª–µ–º–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Google. –°–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."

    except Exception as e:
        error_details = traceback.format_exc()
        print('---e---- ', error_details)
        # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_details}\n –°–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."


@router.message(F.text == '–û—Ç—á—ë—Ç üìÉ')
async def start_otchet(message: Message, state: FSMContext):
    await message.answer(text='‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é‚¨áÔ∏è', reply_markup=kb.othet_keyboard)


@router.callback_query(F.data == 'create_othet')
async def get_otchet_owner(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OtchetState.get_owner_othet)
    await callback.message.edit_text(text="‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –∫–∞–∫–æ–º—É —Å–∫–ª–∞–¥—Å–∫–æ–º—É —É—á—ë—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç ‚¨áÔ∏è",
                                     reply_markup=await kb.get_owner(callback.from_user.id))


@router.callback_query(F.data.startswith('get_owner_'), OtchetState.get_owner_othet)
async def get_otchet_owner(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    owner_id = callback.data.split('_')[2]
    await state.update_data(get_owner_othet=owner_id)
    user = await db.get_user(callback.from_user.id)
    if user['google_sheet_id']:
        mes = await make_otchet(owner_id=owner_id, google_sheet_id=user['google_sheet_id'])
        await callback.message.edit_text(text=mes)
    else:
        await state.set_state(OtchetState.get_sheet_id)
        await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ id —Å–≤–æ–µ–π –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã\n' \
                                              '–≥–¥–µ –µ—ë –≤–∑—è—Ç—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏',
                                         reply_markup=kb.cancel_keyboard)


@router.callback_query(F.data == 'set_sheet_id')
async def get_otchet_owner(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OtchetState.get_sheet_id)
    await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ id —Å–≤–æ–µ–π –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã\n–ì–¥–µ –µ—ë –≤–∑—è—Ç—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏',
                                     reply_markup=kb.cancel_keyboard)


@router.message(F.text, OtchetState.get_sheet_id)
async def get_sheet_id(message: Message, state: FSMContext):
    google_sheet_id = message.text
    user = await db.get_user(message.from_user.id)
    await db.set_google_sheet_id(user_id=user['id'], google_sheet_id=google_sheet_id)
    await message.answer(text='id –ø–æ–ª—É—á–µ–Ω')
    state_data = await state.get_data()
